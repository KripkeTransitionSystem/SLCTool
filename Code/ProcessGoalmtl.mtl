[comment encoding = Cp1252 /]
[**
 * The documentation of the module.
 */]
[module ProcessGoalmtl('http://www.xtext.org/example/mydsl/MyDsl')/]

[**
 * The documentation of the query
 */]
[query public delete_files(anOclAny: OclAny) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'delete_files()', Sequence{})
/]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public count_Actor(arg0 : String) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'count_Actor(java.lang.String)', Sequence{arg0})
/]

[**
 * The documentation of the query
 * @param arg0
 * @param arg1
 * @param arg2
 */]
[query public goalProcess(arg0 : String, arg1 : String, arg2 : String) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'goalProcess(java.lang.String, java.lang.String, java.lang.String)', Sequence{arg0, arg1, arg2})
/]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public check_CTL_type(arg0 : String) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'check_CTL_type(java.lang.String)', Sequence{arg0})
/]

[**
 * The documentation of the query
 * @param arg0
 * @param arg1
 * @param arg2
 * @param arg3
 */]
[query public check_f_Or_U(arg0 : String, arg1 : String, arg2 : String, arg3 : String) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'check_f_Or_U(java.lang.String, java.lang.String, java.lang.String, java.lang.String)', Sequence{arg0, arg1, arg2, arg3})
/]

[**
 * The documentation of the query
 * @param arg0
 * @param arg1
 * @param arg2
 * @param arg3
 * @param arg4
 * @param arg5
 * @param arg6
 */]
[query public check_X(arg0 : String, arg1 : String, arg2 : String, arg3 : String, arg4 : String, arg5 : String, arg6 : String) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'check_X(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)', Sequence{arg0, arg1, arg2, arg3, arg4, arg5, arg6})
/]

[**
 * The documentation of the query
 * @param arg0
 * @param arg1
 */]
[query public X_Next_state(arg0 : String, arg1 : String) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'X_Next_state(java.lang.String, java.lang.String)', Sequence{arg0, arg1})
/]

[**
 * The documentation of the query
 */]
[query public convert_to_global(anOclAny: OclAny) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'convert_to_global()', Sequence{})
/]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public check_CTL_global_or_existential(arg0 : String) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'check_CTL_global_or_existential(java.lang.String)', Sequence{arg0})
/]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public check_CTL_type2(arg0 : String) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'check_CTL_type2(java.lang.String)', Sequence{arg0})
/]

[**
 * The documentation of the query
 */]
[query public convert_to_existential(anOclAny: OclAny) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'convert_to_existential()', Sequence{})
/]

[**
 * The documentation of the query
 */]
[query public create_final_ctl_list(anOclAny: OclAny) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'create_final_ctl_list()', Sequence{})
/]

[**
 * The documentation of the query
 * @param arg0
 * @param arg1
 */]
[query public check_compliance(arg0 : String, arg1 : Integer) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'check_compliance(java.lang.String, )', Sequence{arg0, arg1})
/]

[**
 * The documentation of the query
 */]
[query public check_validity(anOclAny: OclAny) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'check_validity()', Sequence{})
/]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public setFSM_name(arg0 : String) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'setFSM_name(java.lang.String)', Sequence{arg0})
/]

[**
 * The documentation of the query
 */]
[query public skeleton(anOclAny: OclAny) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'skeleton()', Sequence{})
/]

[**
 * The documentation of the query
 */]
[query public map(anOclAny: OclAny) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'map()', Sequence{})
/]

[**
 * The documentation of the query
 */]
[query public call_generate(anOclAny: OclAny) : OclVoid
	= invoke('org.eclipse.acceleo.mydsl2text.main.services.ProcessGoal', 'call_generate()', Sequence{})
/]

